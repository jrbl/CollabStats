#!/usr/bin/env python
# -*- coding: utf-8 -*-
#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+
#Copyright (C) 2009  Joe Blaylock <jrbl@jrbl.org>
#
#This program is free software: you can redistribute it and/or modify it under 
#the terms of the GNU General Public License as published by the Free Software 
#Foundation, either version 3 of the License, or (at your option) any later 
#version.
#
#This program is distributed in the hope that it will be useful, but WITHOUT 
#ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
#FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
#details.
#
#You should have received a copy of the GNU General Public License along with 
#this program.  If not, see <http://www.gnu.org/licenses/>.
#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+
"""ircstats - a little script to parse XML IRC logs and gather stats from them

Cf. http://forge.blueoxen.net/wiki/IRC_Analytics
Cf. RFC 2812
Cf. http://colloquy.info/project/wiki/Development/Styles/LogFileFormat
"""

import xml.dom.minidom as md
from xml.dom import NotSupportedErr as NotSupportedError
from datetime import datetime

from UserStats import UserStats
import UserTable
from ircColloquy import *


#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+
DEBUG     = False
VERSION   = "0.1"


#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+

def count_messages(user):
    return len(user.messages.keys())

def count_actions(user):
    return len(user.actions.keys())
        
def usersByName(userTable):
    for name in sorted(userTable.keys()):
        yield userTable[name]

def statsForUser(user, msgcount = None, actcount = None):
    """Returns (nick, message_count, act_count, message_ratio, act_ratio)
       
    msgcount is the total count of messages seen since the dawn of time
    actcount is the same, for actions

    message_ratio is the ratio of messages this user produced, to all messages
    act_ratio is the ratio of actions this user emitted, to all actions
    """

    nick = user.nick
    msgs = count_messages(user)
    acts = count_actions(user)
    msgrat = 0
    actrat = 0
    if msgcount != None:
        msgrat = float(msgs)/msgcount
    if actcount != None:
        actrat = float(acts)/actcount

    return (nick, msgs, acts, msgrat, actrat)

def count_everything(userTable):
    """Make a complete pass through the user database, gathering the total count of messages and acts."""
    msgcount = 0
    actcount = 0
    for id in userTable.keys():
        msgcount += count_messages(userTable[id])
        actcount += count_actions(userTable[id])
    return (msgcount, actcount)

def setup_optparse():
    import optparse
    usage = "usage: %prog [options] file1.xml [file2.xml] [...]"
    parser = optparse.OptionParser(usage=usage, version=VERSION)
    parser.add_option('-c', "--csv",      dest="csv",      action="store_true", default=False, 
                      help="Write a CSV-formatted file of all statistics to stdout")
    parser.add_option('-t', "--totals",   dest="totals",   action="store_true", default=False, 
                      help="Output summary totals of messages and actions")
    parser.add_option('-m', "--messages", dest="messages", action="store_true", default=False, 
                      help="Output message counts per username")
    parser.add_option('-a', "--actions",  dest="actions",  action="store_true", default=False, 
                      help="Output action counts per username")
    parser.add_option('-l', "--lurkers",  dest="lurkers",  action="store_true", default=False, 
                      help="Output list of lurkers - users who don't say anything")
    parser.add_option('-d', "--debug",    dest="debug",    action="store_true", default=False, 
                      help="Enable debug mode.  Really, it's not that great.")
    options, args = parser.parse_args()
    return parser


#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+
if __name__ == "__main__":

    option_parser = setup_optparse()
    options, args = option_parser.parse_args()

    if options.debug: DEBUG = True

    # Read in on-disk data stores; set up mapping dictionaries
    userTable = UserTable.UserTable(mapping_yaml = 'usernames.yaml', user_objects_db = 'irc_users.pickle')
    
    # Read in and process user log file
    for filename in args:
        dom = md.parse(filename)                           # should be in ircColloquy.py?
        assert dom.documentElement.tagName == u"log"
        handleLogDOM(dom.documentElement, userTable)
        dom.unlink()

    msgcount, actcount = count_everything(userTable)

    if options.totals:
        print "Total messages:", msgcount + actcount
        print "Messages:", msgcount
        print "Actions:", actcount

    if options.messages:
        print "Messages by user:"
        print '\t%s  %s  %15s' % ("Msgs", "%Tot", "IRC Nick")
        for id in userTable:
            msgs = count_messages(userTable[id])
            if msgs > 0:
                print '\t %3d  %.2f  %20s' % (msgs, float(msgs)/msgcount, userTable.idToName(id))

    if options.actions:
        print "Actions by user:"
        print '\t%s  %s  %15s' % ("Acts", "%Tot", "IRC Nick")
        for id in userTable:
            acts = count_actions(userTable[id])
            if acts > 0:
                print '\t %3d  %.2f  %20s' % (acts, float(acts)/actcount, userTable.idToName(id))

    if options.lurkers: 
        lurkers = []
        semilurk = []
        for id in userTable:
            user = userTable[id]
            stats = statsForUser(user, msgcount, actcount)
            if stats[1] == 0 and stats[2] == 0:
                lurkers.append(userTable.idToName(user.id))
            elif stats[2] == 0:
                semilurk.append(userTable.idToName(user.id))
        if len(lurkers) == 0:
            print "No Lurkers"
        else:
            print "Lurkers:"
            for name in lurkers:
                print '\t %s' % name
        if len(semilurk) == 0:
            print "No action-only users"
        else:
            print "Action-only users:"
            for name in semilurk:
                print '\t %s' % name

    if options.csv:
        import csv, sys
        csv.register_dialect("ooffice_like", delimiter=',', skipinitialspace=True, 
                                                            lineterminator="\n", quoting=csv.QUOTE_NONNUMERIC)
        def statsTuples():
            yield ("IRC Nick", "Message Count", "Action Count", "Messages/Total Messages", "Actions/Total Actions")
            for user in usersByName(userTable):
                yield statsForUser(user, msgcount, actcount)
        csv.writer(sys.stdout, dialect="ooffice_like").writerows(statsTuples())

    userTable.close()
