#!/usr/bin/env python
# -*- coding: utf-8 -*-
#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+
#Copyright (C) 2009  Joe Blaylock <jrbl@jrbl.org>
#
#This program is free software: you can redistribute it and/or modify it under 
#the terms of the GNU General Public License as published by the Free Software 
#Foundation, either version 3 of the License, or (at your option) any later 
#version.
#
#This program is distributed in the hope that it will be useful, but WITHOUT 
#ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
#FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
#details.
#
#You should have received a copy of the GNU General Public License along with 
#this program.  If not, see <http://www.gnu.org/licenses/>.
#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+
"""ircstats - a little script to parse XML IRC logs and gather stats from them

Cf. http://forge.blueoxen.net/wiki/IRC_Analytics
Cf. RFC 2812
Cf. http://colloquy.info/project/wiki/Development/Styles/LogFileFormat
"""

import xml.dom.minidom as md
from xml.dom import NotSupportedErr as NotSupportedError

from IRCUser import IRCUser
import UserTable


#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+
DEBUG     = False
VERSION   = "0.05x"
LOG_START = None
LOG_END   = None


#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+
def getIRCUserForNick(irc_nick, ircUserTable):
    """Checks whether we've ever seen this nick and returns the corresponding user"""

    if irc_nick not in ircUserTable:
        ircUserTable[irc_nick] = IRCUser(irc_nick, LOG_START)

    return ircUserTable[irc_nick]

def handleLogDOM(dom, userTable):
    """Process the elements in a colloquy log DOM"""
    global LOG_START 
    LOG_START = dom.getAttribute('began')
    for child in dom.childNodes:
        if child.tagName == u"envelope":         # one or more lines from a user
            handleEnvelope(child, userTable)
        elif child.tagName == u"event":          # IRC server event
            handleEvent(child, userTable)
        else:                                    # violates log spec
            raise NotSupportedError, "Unknown child node " + child.tagName

    for user in userTable.keys():
        userTable[user].part(LOG_END)

def handleEnvelope(child, userTable):
    """Pick the relevant data off of a blob of messages from a single user."""

    global LOG_END
    global MSGCOUNT
    global ACTCOUNT

    irc_nick = getIrcNickAndValidate(child.getElementsByTagName('sender'))
    user_object = getIRCUserForNick(irc_nick, userTable) 

    for message in child.getElementsByTagName('message'):

        timestamp = message.getAttribute('received')
        pretty    = message.toprettyxml(encoding="utf-8")

        if message.getAttribute('type') == u"notice":
            handleMessageNotice(user_object, timestamp, pretty)
        elif message.getAttribute('action'):
            user_object.action(timestamp, pretty)
            ACTCOUNT += 1
        else:
            user_object.message(timestamp, pretty)
            MSGCOUNT += 1

        LOG_END = timestamp
    if DEBUG: print irc_nick

def handleMessageNotice(user_object, timestamp, message):
    print "------------------------------------------------------------------------------"
    print "System notice detected, but currently unsupported by the parser."
    print "Now that there's some sample input for what notices look like,"
    print "this can be fixed."
    print
    print message
    print "------------------------------------------------------------------------------"

def handleEvent(child, userTable):
    print "------------------------------------------------------------------------------"
    print "Event detected, but currently unsupported by the parser."
    print "Now that there's some sample input for what events look like,"
    print "this can be fixed."
    print
    print "After event handling is implemented, re-run this script for more"
    print "accurate stats."
    print 
    print child
    print "------------------------------------------------------------------------------"

def getIrcNickAndValidate(element_list):
    first = element_list[0]
    if len(element_list) > 1:
        parent = first.parentNode
        raise NotSupportedError, "Multiple senders on node: " + parent.toprettyxml()
    id = first.getAttribute('identifier')
    if id == '':
        return first.firstChild.nodeValue
    else: 
        return id

def count_messages(user):
    return len(user.messages.keys())

def count_actions(user):
    return len(user.actions.keys())
        
def usersByName(userTable):
    for name in sorted(userTable.keys()):
        yield userTable[name]

def statsForUser(user):
    """Returns (nick, message_count, act_count, message_ratio, act_ratio)"""

    nick = user.nick
    msgs = count_messages(user)
    acts = count_actions(user)
    msgrat = float(msgs)/MSGCOUNT
    actrat = float(acts)/ACTCOUNT

    return (nick, msgs, acts, msgrat, actrat)

def count_everything(userTable):
    """Make a complete pass through the user database, gathering the total count of messages and acts."""
    msgcount = 0
    actcount = 0
    for id in userTable.keys():
        msgcount += count_messages(userTable[id])
        actcount += count_actions(userTable[id])
    return (msgcount, actcount)

def setup_optparse():
    import optparse
    usage = "usage: %prog [options] file1.xml [file2.xml] [...]"
    parser = optparse.OptionParser(usage=usage, version=VERSION)
    parser.add_option('-c', "--csv",      dest="csv",      action="store_true", default=False, 
                      help="Write a CSV-formatted file of all statistics to stdout")
    parser.add_option('-t', "--totals",   dest="totals",   action="store_true", default=False, 
                      help="Output summary totals of messages and actions")
    parser.add_option('-m', "--messages", dest="messages", action="store_true", default=False, 
                      help="Output message counts per username")
    parser.add_option('-a', "--actions",  dest="actions",  action="store_true", default=False, 
                      help="Output action counts per username")
    parser.add_option('-l', "--lurkers",  dest="lurkers",  action="store_true", default=False, 
                      help="Output list of lurkers - users who don't say anything")
    parser.add_option('-d', "--debug",    dest="debug",    action="store_true", default=False, 
                      help="Enable debug mode.  Really, it's not that great.")
    options, args = parser.parse_args()
    return parser


#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+#########+
if __name__ == "__main__":

    option_parser = setup_optparse()
    options, args = option_parser.parse_args()

    if options.debug: DEBUG = True

    # Read in on-disk data stores; set up mapping dictionaries
    userTable = UserTable.UserTable(mapping_yaml = 'usernames.yaml', ircUsersDB = 'irc_users.pickle')
    
    # Read in and process user log file
    for filename in args:
        dom = md.parse(filename)
        assert dom.documentElement.tagName == u"log"
        handleLogDOM(dom.documentElement, userTable)
        dom.unlink()

    MSGCOUNT, ACTCOUNT = count_everything(userTable)

    if options.totals:
        print "Total messages:", MSGCOUNT + ACTCOUNT
        print "Messages:", MSGCOUNT
        print "Actions:", ACTCOUNT

    if options.messages:
        print "Messages by user:"
        print '\t%s  %s  %15s' % ("Msgs", "%Tot", "IRC Nick")
        for id in userTable:
            msgs = count_messages(userTable[id])
            if msgs > 0:
                print '\t %3d  %.2f  %20s' % (msgs, float(msgs)/MSGCOUNT, userTable.idToName(id))

    if options.actions:
        print "Actions by user:"
        print '\t%s  %s  %15s' % ("Acts", "%Tot", "IRC Nick")
        for id in userTable:
            acts = count_actions(userTable[id])
            if acts > 0:
                print '\t %3d  %.2f  %20s' % (acts, float(acts)/ACTCOUNT, userTable.idToName(id))

    if options.lurkers: 
        lurkers = []
        semilurk = []
        for id in userTable:
            user = userTable[id]
            stats = statsForUser(user)
            if stats[1] == 0 and stats[2] == 0:
                lurkers.append(userTable.idToName(user.id))
            elif stats[2] == 0:
                semilurk.append(userTable.idToName(user.id))
        if len(lurkers) == 0:
            print "No Lurkers"
        else:
            print "Lurkers:"
            for name in lurkers:
                print '\t %s' % name
        if len(semilurk) == 0:
            print "No action-only users"
        else:
            print "Action-only users:"
            for name in semilurk:
                print '\t %s' % name

    if options.csv:
        import csv, sys
        csv.register_dialect("ooffice_like", delimiter=',', skipinitialspace=True, 
                                                            lineterminator="\n", quoting=csv.QUOTE_NONNUMERIC)
        def statsTuples():
            yield ("IRC Nick", "Message Count", "Action Count", "Messages/Total Messages", "Actions/Total Actions")
            for user in usersByName(userTable):
                yield statsForUser(user, userTable)
        csv.writer(sys.stdout, dialect="ooffice_like").writerows(statsTuples())

    userTable.close()
